//   ========================================================
// * @desc       Sass mixins for the legacy, non-flexbox grid
// * @see        https://github.com/ny/coreui
//   ========================================================


// * @section    Legacy grid styles (no flex box)
// * --------------------------------------------------------

@mixin legacy-row($margin: $cui-grid-row-margin, $width: 100%) {
    width: $width;
    clear: both;
    @include clearfix;
    margin: $margin;
}

// Standard column
@mixin legacy-col() {
    float: left;
    position: relative;
    @include clearfix;
    min-height: $cui-grid-column-min-height;
    padding: $cui-grid-column-padding;
    // By default, use up the whole width of the row
    // E.g. a column with only a `col-large-` class should be 100% width on small and medium sized screens
    width: 100%;
}

@mixin legacy-grid-row($breakpointName: "small") {
    @warn "The `legacy-grid-row` mixin is deprecated. Instead, wrap `@include legacy-row` with the appropriate media query";

    @if $breakpointName == "small" {
        @include legacy-row;
    }
    @elseif $breakpointName == "medium" {
        @include pointbreak($cui-bp-medium) {
            @include legacy-row;
        }
    }
    @else {
        @include pointbreak($cui-bp-large) {
            @include legacy-row;
        }
    }
}

// Generates fixed and flex classes for a given breakpoint
@mixin legacy-generate-fixed-flex-columns($breakpointName: "") {
    // Fixed & flex column layout approach:
    // Give fixed columns `width: Npx` and let them inherit `float: left`. Give flex columns `margin-left: Npx` and apply `float: none` and `width: 100%`. This works except that the flex columns are always 1 pixel taller than the fixed columns due to floats being handled differently.
    // We avoid floats using `calc()` which has good browser support but not quite 100% yet. Fixed columns are the same as above (`width: Npx`, inherit `float:left`). Flex columns use `width: calc(100% - Npx)` and no `margin-left`.

    // Fixed

    @each $size in $cui-grid-fixed-sizes {
        $x: getNumberAndUnit($size);
        $value: nth($x, 1);
        $unit: nth($x, 2);

        .cui-flex-row .cui-fixed-col-#{$breakpointName}-#{$size} {
            width: #{$value}#{$unit};
        }
    }

    // Flexible

    .no-csscalc [class*="cui-flex-col-#{$breakpointName}"] {
        float: none;
        width: 100%;
    }

    // Automatic sizing
    .cui-flex-col-#{$breakpointName} {
        @include col(1);

        // Need to override any specific values from other breakpoints
        // For example, `<div class="cui-col-small-6 cui-flex-col-large">` would inherit 50% width from the `small` class even when the screen size is large
        flex-basis: auto;
        max-width: none;
    }

    // Specific flex sizes
    @each $size in $cui-grid-flex-sizes {
        $x: getNumberAndUnit($size);
        $value: nth($x, 1);
        $unit: nth($x, 2);

        .cui-flex-col-#{$breakpointName}-#{$size} {
            @include col(1 0 #{$value}#{$unit});

            .no-flexbox & {
                width: calc(100% - #{$value}#{$unit});
            }
        }

        .no-csscalc {
            // Flex col is to the left of the fixed col
            .cui-flex-col-#{$breakpointName}-#{$size} {
                margin-right: #{$value}#{$unit};
            }

            // Flex col is to the right of the fixed col
            [class*="cui-fixed-col-#{$breakpointName}"] + .cui-flex-col-#{$breakpointName}-#{$size} {
                margin-right: auto;
                margin-left: #{$value}#{$unit};
            }
        }
    }
}

// Helper method that calls the actual class-creating mixins above
// We need this because we loop through all of the breakpoints except "small" but we want to be sure we're outputting the same code for all sizes
@mixin legacy-generate-classes($breakpointName: "", $numColumns: $cui-grid-column-count, $breakpointMaxWidth: "") {
    @include generate-column($breakpointName, $numColumns, $breakpointMaxWidth);
    @include utility-classes($breakpointName);
    @include generate-fixed-flex-columns($breakpointName);
}

// Return width for a single division (column) as a percentage of the total container (row)
@function legacy-column-width-calc($colNumber, $colTotal) {
    @return percentage($colNumber / $colTotal);
}

// Generates column classes for all breakpoint sizes
@mixin legacy-generate-grid($numColumns: $cui-grid-column-count) {

    // Finally, generate the classes for each size:

    // Base (small) size -- these styles are not wrapped in a media query
    @include generate-classes("small", $numColumns, $cui-bp-medium);

    // All other sizes
    @each $b in $cui-grid-breakpoints {
        $breakpointName: nth($b, 1);
        $breakpointMinWidth: nth($b, 2);

        // Create a new media query for the breakpoint
        @include pointbreak($breakpointMinWidth) {
            // Generate classes within the media query
            @include generate-classes($breakpointName, $numColumns, $cui-bp-medium);
        }
    }
}

// Generates all of the column classes for all breakpoints
// e.g. `cui-col-small-6`, `cui-col-medium-4`, etc
@mixin legacy-generate-column($breakpointName: "", $numColumns: $cui-grid-column-count, $breakpointMaxWidth: "") {
    // Loop through each column creating the grid
    @for $i from 1 to $numColumns + 1 {
        // Percentage-based width of the column
        $width: legacy-column-width-calc($i, $numColumns);

        // Create this column number and assign it the correct width.
        .cui-col-#{$breakpointName}-#{$i} {
            width: $width;
        }

        @if $breakpointMaxWidth != "" {
            @if $i == 6 {
                // Make sure every column that begins a new "row" clears the elements before it.
                // E.g. if there are four cols inside a row, and the first col is tall, the third col would not wrap down to a new line as intended
                // We're using `max-width` media query so it doesn't affect a `.cui-col-small-6.cui-col-medium-*` element in a larger viewport
                //TODO: Copy this practice for other classes (e.g. every 4th col-small-4 should wrap to a new line)
                //FIXME: This currently only generates for the small (no-MQ) breakpoint
                @include pointbreak($breakpointMaxWidth, true) {
                    .cui-col-#{$breakpointName}-#{$i}:nth-child(2n+3) {
                        clear: both;
                    }
                }
            }
        }
    }

    // Loop through again, this time creating the `push` classes
    @for $i from 1 to $numColumns {
        // Percentage-based width of the column
        $width: legacy-column-width-calc($i, $numColumns);

        .cui-push-#{$breakpointName}-#{$i} {
            margin-left: $width;
        }
    }

    // Loop through again, this time creating the `pull` classes
    @for $i from 1 to $numColumns {
        // Percentage-based width of the column
        $width: legacy-column-width-calc($i, $numColumns);

        .cui-pull-#{$breakpointName}-#{$i} {
            margin-right: $width;
        }
    }
}

@mixin legacy-grid-col-flex($breakpointName: "small", $width: false) {
    @if $breakpointName == "small" {
        @include grid-col-flex-helper($breakpointName, $width);
    }
    @elseif $breakpointName == "medium" {
        @include pointbreak($cui-bp-medium) {
            @include grid-col-flex-helper($breakpointName, $width);
        }
    }
    @else {
        @include pointbreak($cui-bp-large) {
            @include grid-col-flex-helper($breakpointName, $width);
        }
    }
}
