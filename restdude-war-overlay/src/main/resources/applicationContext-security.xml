<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:sec="http://www.springframework.org/schema/security"
       xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd">

    <sec:global-method-security pre-post-annotations="enabled" secured-annotations="enabled">
        <sec:expression-handler ref="expressionHandler"/>
    </sec:global-method-security>

    <bean id="expressionHandler"
          class="com.restdude.auth.spel.binding.ModelDrivenMethodSecurityExpressionHandler">
        <property name="parameterNameDiscoverer" ref="parameterNameDiscoverer"/>
        <property name="permissionEvaluator" ref="permissionEvaluator"/>
    </bean>
    <bean id="permissionEvaluator" class="com.restdude.auth.spel.binding.ModelPermissionEvaluator"/>
    <bean id="parameterNameDiscoverer"
          class="org.springframework.security.core.parameters.AnnotationParameterNameDiscoverer">
        <constructor-arg>
            <set>
                <value>org.springframework.security.access.method.P</value>
                <value>org.springframework.data.repository.query.Param</value>
                <value>org.springframework.web.bind.annotation.PathVariable</value>
                <value>org.springframework.web.bind.annotation.RequestBody</value>
                <value>org.springframework.web.bind.annotation.RequestParam</value>
            </set>
        </constructor-arg>
    </bean>


    <bean id="anonymousAuthenticationFilter"
          class="com.restdude.auth.userdetails.util.AnonymousAuthenticationFilter">
        <constructor-arg value="foobar"/>
    </bean>

    <bean id="anonymousAuthenticationProvider"
          class="org.springframework.security.authentication.AnonymousAuthenticationProvider">
        <constructor-arg value="foobar"/>
    </bean>


    <!-- Do not create sessions -->
    <bean id="securityContextPersistenceFilter"
          class="org.springframework.security.web.context.SecurityContextPersistenceFilter">
        <constructor-arg>
            <bean class='org.springframework.security.web.context.HttpSessionSecurityContextRepository'>
                <property name='allowSessionCreation' value='false'/>
            </bean>
        </constructor-arg>
    </bean>

    <!-- authenticates based on JWT access token -->
    <bean id="jwtAuthenticationFilter"
          class="com.restdude.auth.jwt.JwtAuthenticationProcessingFilter">
        <!--constructor-arg index="0" ref="authenticationManager"/-->
    </bean>

    <!-- Declare an authentication-manager to use custom userDetailsService implementations -->
    <sec:authentication-manager alias="authenticationManager">
        <sec:authentication-provider user-service-ref='userDetailsService'>
            <sec:password-encoder ref="passwordEncoder"/>
        </sec:authentication-provider>
    </sec:authentication-manager>

    <sec:http create-session="stateless" entry-point-ref="restAuthenticationEntryPoint" use-expressions="true"
              disable-url-rewriting="true" authentication-manager-ref="authenticationManager">
        <sec:headers>
            <sec:frame-options policy="SAMEORIGIN"/>
        </sec:headers>

        <sec:custom-filter ref="jwtAuthenticationFilter" before="BASIC_AUTH_FILTER"/>
        <!-- Disable Spring Security CSRF protection since
        it requires sessions and we don't really want those
        in a stateless domain
         -->
        <sec:csrf disabled="true"/>
        <sec:http-basic entry-point-ref="restAuthenticationEntryPoint"/>

        <sec:anonymous enabled="false"/>
        <sec:custom-filter ref="anonymousAuthenticationFilter" position="ANONYMOUS_FILTER"/>

        <sec:logout invalidate-session="true"/>

        <!-- allow anonymous register/login etc. -->
        <sec:intercept-url pattern="/apiauth/**" access="permitAll()"/>
        <sec:intercept-url pattern="/api/auth/**" access="permitAll()"/>

        <!-- for spring social login/signup -->
        <sec:intercept-url pattern="/login" access="permitAll"/>
        <sec:intercept-url pattern="/signin/**" access="permitAll"/>
        <sec:intercept-url pattern="/signup/**" access="permitAll"/>

        <!-- protect REST API  modifying methods-->
        <sec:intercept-url pattern="/api/rest/**" method="POST" access="hasAnyAuthority('ROLE_USER')"/>
        <sec:intercept-url pattern="/api/rest/**" method="PUT" access="hasAnyAuthority('ROLE_USER')"/>
        <sec:intercept-url pattern="/api/rest/**" method="PATCH" access="hasAnyAuthority('ROLE_USER')"/>
        <sec:intercept-url pattern="/api/rest/**" method="DELETE" access="hasAnyAuthority('ROLE_USER')"/>

        <!-- Adds social authentication filter to the Spring Security filter chain. 
        <sec:custom-filter ref="socialAuthenticationFilter" before="PRE_AUTH_FILTER" />-->
    </sec:http>


    <!-- sec:websoctitlesage-broker>
            <sec:interctitlesage type="CONNECT" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" />
            <sec:interctitlesage type="UNSUBSCRIBE" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" />
            <sec:interctitlesage type="DISCONNECT" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" />
            <sec:interctitlesage type="MESSAGE" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" />
            <sec:interctitlesage type="SUBSCRIBE" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" />
            <sec:interctitlesage pattern="/domain/**" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" />
            <sec:interctitlesage pattern="/topic/**" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" />
            <sec:interctitlesage pattern="/user/**" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" />
    </sec:websoctitlesage-broker-->


    <!-- To enable Method Security Expressions and custom PermissionEvaluator
        we need to add the following 
    -->
    <!--
    Configures the social authentication filter which integrates Spring Social
    with Spring Security.
    <bean identifier="socialAuthenticationFilter" class="org.springframework.social.security.SocialAuthenticationFilter">
        <constructor-arg index="0" ref="authenticationManager"/>
        <constructor-arg index="1" ref="userIdSource"/>
        <constructor-arg index="2" ref="usersConnectionRepository"/>
        <constructor-arg index="3" ref="connectionFactoryLocator"/>

        <propesourcename="signupUrl" pathFragment="/register" />
        <propesourcename="postLoginUrl" pathFragment="/manager/"/>
        
        
    </bean> 
    -->


</beans>